<!-- check this link how to add bootstrap in Sails: https://www.digitalentropy.co.uk/add-bootstrap-to-your-sailsjs-app/ -->
<div id="customer-with-orders" v-cloak class="container">
  <div class="row">
    <div class="row">
      <h3 class="col-md-4">Customer's Data</h3>

      <button class="col-md-1 btn btn-info btn-medium" type="button" id="orderAdd">Add</button>
      <div class="col-md-3 col-heading">
        <button class="btn btn-warning btn-medium" type="button">Edit</button>
        <button class="btn btn-danger btn-medium" type="button">Delete</button>
      </div>
    </div>
    <div class="row">
      <div class="col-md-1 col-heading">Id</div>
      <div class="col-md-3 col-heading">Name</div>
      <div class="col-md-2 col-heading">Email</div>
      <div class="col-md-2 col-heading">Telephone</div>
      <div class="col-md-4 col-heading">Address</div>

    </div>
  </div>
  <div class="row">
    <div class="col-md-1">
      <%= customerWithOrders.customer.id %>
    </div>
    <div class="col-md-3">
      <%= customerWithOrders.customer.name %>
    </div>
    <div class="col-md-2">
      <%= customerWithOrders.customer.email %>
    </div>
    <div class="col-md-2">
      <%= customerWithOrders.customer.telephone %>
    </div>
    <div class="col-md-4">
      <%= customerWithOrders.customer.address %>
    </div>
  </div>
  <button class="btn btn-primary btn-normal" type="button" data-bs-toggle="collapse" data-bs-target="#orderdata"
    aria-expanded="false" aria-controls="orderdata">
    Show Orders
  </button>
  <div class="row">
    <div class="card card-body">
      <h4 class="row">Orders' Data</h4>
      <div class="row">
        <div class="col col-heading">Id</div>
        <div class="col col-heading">Total Price</div>
        <div class="col col-heading">Created At</div>
        <div class="col col-heading">Updated At</div>
      </div>
      <div class="collapse" id="orderdata">
        <% for(let i=0; i < customerWithOrders.ordersWithProducts.length; i++) { %>
          <div class="row">
            <div class="col">
              <%= customerWithOrders.ordersWithProducts[i].id %>
            </div>
            <div class="col">
              <%= customerWithOrders.ordersWithProducts[i].totalPrice %>
            </div>
            <div class="col">
              <%= new Date().toLocaleDateString(customerWithOrders.ordersWithProducts[i].created) %>
            </div>
            <div class="col">
              <%= new Date().toLocaleDateString(customerWithOrders.ordersWithProducts[i].updated) %>
            </div>
            <h5 class="row">Product Data</h5>
            <div class="row">
              <div class="col col-heading">Id</div>
              <div class="col col-heading">Name</div>
              <div class="col col-heading">Price</div>
              <div class="col col-heading">Description</div>
              <div class="col col-heading">Quantity</div>
              <div class="col col-heading">Created At</div>
              <div class="col col-heading">Updated At</div>
            </div>
            <% /* can I make an AJAX call to return an array of quantities for the order with order
              id=customerWithOrders.ordersWithProducts[i] and products'
              id=customerWithOrders.ordersWithProducts[i].products where we get just the ids to send to a controller
              that accepts a number and an array of products ids */ let productIds=[]; for(let j=0; j <
              customerWithOrders.ordersWithProducts[i].products.length; j++) {
              productIds.push(customerWithOrders.ordersWithProducts[i].products[j].id); } let orderProducts={
              orderId:customerWithOrders.ordersWithProducts[i].id, productIds: productIds }; %>
              <% for(let j=0; j < customerWithOrders.ordersWithProducts[i].products.length; j++) { %>
                <script>
                  var orderId = '<%= orderProducts.orderId %>';
                  var productIds = '<%= orderProducts.productIds %>';
                  var orderProducts = `{ "orderId": ${orderId}, "productIds": [${productIds}] }`;
                  var arrayOfProductIds = [];
                  productIds.split(",").forEach(e => arrayOfProductIds.push(parseInt(e)));
                  // var xhttp = new XMLHttpRequest();
                  // xhttp.onreadystatechange = function () {
                  //   if (this.readyState == 4 && this.status == 200) {
                  //     var resultProductIds = Array.from(JSON.parse(this.responseText));
                  //     let i = 0;
                  //     resultProductIds.forEach(quantity => {
                  //         let entry = document.getElementById(`o${orderId}p${arrayOfProductIds[i++]}`);
                  //         entry.innerHTML = quantity;
                  //     });
                  //   }
                  // }
                  // xhttp.open("POST", "http://localhost:1337/orders/quantities", true);
                  // xhttp.setRequestHeader("Content-type", "application/json");
                  // xhttp.send(orderProducts);
                </script>
                <div class="row">
                  <div class="col">
                    <%= customerWithOrders.ordersWithProducts[i].products[j].id %>
                  </div>
                  <div class="col">
                    <%= customerWithOrders.ordersWithProducts[i].products[j].name %>
                  </div>
                  <div class="col">
                    <%= customerWithOrders.ordersWithProducts[i].products[j].price %>
                  </div>
                  <div class="col">
                    <%= customerWithOrders.ordersWithProducts[i].products[j].description %>
                  </div>
                  <div class="col"
                    id='<%= "o" + customerWithOrders.ordersWithProducts[i].id + "p" + customerWithOrders.ordersWithProducts[i].products[j].id %>'>
                  </div>
                  <div class="col">
                    <%= new Date().toLocaleDateString(customerWithOrders.ordersWithProducts[i].products[j].createdAt) %>
                  </div>
                  <div class="col">
                    <%= new Date().toLocaleDateString(customerWithOrders.ordersWithProducts[i].products[j].updatedAt) %>
                  </div>
                </div>
                <% } %>
          </div>
          <% } %>
      </div>
    </div>
  </div>
</div>

<script>
  let productsFromDB = [];
  let formData = {};

  function getProducts() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        var result = Array.from(JSON.parse(this.responseText));
        formData = {
          customerId: '<%= customerWithOrders.customer.id %>',
          customerName: '<%= customerWithOrders.customer.name %>',
          /*
             <!-- 
                    STEP 1.
                    1a. Create a controller that returns the products <--- JSON Array with products
                    1b. Make the call to get the products
                    Can we bring the products dynamically?
                    Yes. With AJAX or WebSockets!
                    Can you do it?
              -->
          */
          products: result,
          question: 'Add this Order?'
        }
      }
    }
    xhttp.open("get", "http://localhost:1337/products", true);
    // xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.send();
  }
  
  getProducts();
  

  /*
    [
      { id: 1, name: "Smart Home", price: 10000, quantity: 0 },
      { id: 2, name: "Smart Car", price: 100000, quantity: 0 }
    ]
  */

  document.getElementById('orderAdd').onclick = () => showModal('Add a new Order', formData, "Add", "Cancel", () => {
    // STEP 3.
    // send these data to the back end by creating an order
    // 3.a gather the data:
    // customerId, productId, quantity, product price
    // 3.b create a controller that accepts these data
    // 3.c. inside the controller make a new order .....
    let productId = document.getElementById('listOfProducts').value;
    let price = formData.products.find(product => product.id == productId).price;
    let quantity = document.getElementById(`p${productId}value`).value;
    let newOrder = { 
      customerId: '<%= customerWithOrders.customer.id %>',
      productId: productId,
      productPrice: price,
      quantity: quantity
    }
    console.log(newOrder);
    console.log('You created an order!');
  });
</script>